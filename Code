******************************************************************************************************************************
Code:

const { ethers } = require('ethers');

const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-...'); // Insert alchemy API URL

const contractAddress = '0x...'; // Insert target contract
const firstFunctionSelector = '0x...'; // Insert first function selector
const secondFunctionSelector = '0x...'; // Insert second function selector

// Define the sender's private key
const senderPrivateKey = '3...'; // Replace with the actual private key

async function callFunction() {
    try {
        const wallet = new ethers.Wallet(senderPrivateKey, provider);

        // 1st interaction: Call 0x... function
        const firstCallData = firstFunctionSelector;
        const firstTx = {
            from: wallet.address,
            to: contractAddress,
            data: firstCallData,
        };
        const firstTxResult = await provider.call(firstTx);

        // Extract the argument and value from the response of the first call
        const argument = firstTxResult.slice(0, 66); // Extract the first 32 bytes (64 characters) as the argument
        const hexValue = firstTxResult.slice(66); // Extract the value

        // 2nd interaction: Use output from first call to send transaction
        const secondTx = {
            to: contractAddress,
            data: secondFunctionSelector + argument.slice(2), // Remove '0x' prefix from the argument
            value: ethers.BigNumber.from(hexValue), // Convert hexadecimal string to BigNumber
            gasLimit: 500000,
            chainId: 80001, // Mumbai testnet
        };

        const txResponse = await wallet.sendTransaction(secondTx);
        console.log('Transaction Hash:', txResponse.hash);
    } catch (error) {
        console.error('Error calling the function:', error);
    }
}

callFunction();

******************************************************************************************************************************

There are two separate interactions to make with the contract
First to call the `0x...` function and then use the output to send the transaction
You need to modify 'argument' and 'value' based on the response from the call using firstTx
And figure out how to decode the response after the first call, it does not return a uint256

******************************************************************************************************************************
