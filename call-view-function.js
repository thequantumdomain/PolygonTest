// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { createAlchemyWeb3 } = require("@alch/alchemy-web3");
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { Wallet } = require('ethers');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //////const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = createAlchemyWeb3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ///const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const privateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ///const functionSelector = '0xddc24be3';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const wallet = new Wallet(privateKey, web3);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Example function to send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function sendTransaction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         // Example transaction parameters
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txParams = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c', // Contract address
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: '420000000000', // Value in wei
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             gasLimit: 500000, // Adjust as needed
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             gasPrice: web3.utils.toWei('100', 'gwei'), // Gas price in wei (example: 100 gwei)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         // Sign and send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await wallet.sendTransaction(txParams);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction sent:', txResponse);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Call the function to send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // sendTransaction();




// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // ///async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //    try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //  //        const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     //     const weiToSend = '420000000000';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //        //  const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //    //      const data = await web3.eth.call({
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       //       to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //          //    data: callData
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       //   });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //        //  console.log('data:', data);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //    //  } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //       //   console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     // }// 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const encodedData = "43616c6c207468697320636f6e747261637420776974682066756e6374696f6e207369676e6174757265202730786464633234626533272070726f766964696e672061202775696e743235362720617267756d656e74206f662076616c75653a20323237383137393730393238363831363932383837323536343431383433323338313336303133363830363431383135313932383334363635383039363531373931303039303331383138383720416c736f2073656e6420736f6d65207765693a203432303030303030303030300000000000000000000000000000000000";

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Convert hexadecimal string to bytes
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const bytes = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // for (let i = 0; i < encodedData.length; i += 2) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //   //  bytes.push(parseInt(encodedData.substr(i, 2), 16));
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Convert bytes to string
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //const decodedString = new TextDecoder().decode(new Uint8Array(bytes));

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(decodedString);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const hdkey = require('ethereumjs-wallet/hdkey');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const bip39 = require('bip39');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const mnemonic = 'manual dutch small supply flat squeeze depend harvest exhibit nephew goddess speak'; // Replace with your actual seed phrase
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const seed = bip39.mnemonicToSeedSync(mnemonic);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const root = hdkey.fromMasterSeed(seed);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const privateKey = root.derivePath("m/44'/60'/0'/0/0").getWallet().getPrivateKey().toString('hex');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(privateKey);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const bip39 = require('bip39');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { hdkey } = require('ethereumjs-wallet');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Replace 'YOUR_SEED_PHRASE' with your actual seed phrase
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const seedPhrase = 'manual dutch small supply flat squeeze depend harvest exhibit nephew goddess speak';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const seed = bip39.mnemonicToSeedSync(seedPhrase);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const hdWallet = hdkey.fromMasterSeed(seed);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const privateKey = hdWallet.derivePath("m/44'/60'/0'/0/0").getWallet().getPrivateKey().toString('hex');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(privateKey);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // /// 31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // index.js
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // import { Network, Alchemy } from 'alchemy-sdk';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const settings = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     apiKey: "H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z",
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     network: Network.MATIC_MUMBAI,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const alchemy = new Alchemy(settings);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Get the latest block
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const latestBlock = alchemy.core.getBlockNumber();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Get all outbound transfers for a provided address
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // alchemy.core
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     .getTokenBalances('0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c')
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     .then(console.log);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Listen to all new pending transactions
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // alchemy.ws.on(
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     { method: "alchemy_pendingTransactions",
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     fromAddress: "0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c" },
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     (res) => console.log(res)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // );

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { createAlchemyWeb3 } = require("@alch/alchemy-web3");
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { Wallet } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Initialize Alchemy web3 provider
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = createAlchemyWeb3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Add your MetaMask wallet private key here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const privateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637'; // Replace with your MetaMask wallet's private key

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Connect to MetaMask wallet using private key
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const wallet = new Wallet(privateKey, web3);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Contract address and function signature
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSignature = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Function argument
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const argumentValue = '22781797092868169288725644184323813601368064181519283466580965179100903181887';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Encode function call with argument
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const data = web3.eth.abi.encodeFunctionSignature(functionSignature) +
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //              web3.eth.abi.encodeParameter('uint256', argumentValue).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Transaction parameters
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const txParams = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     data: data,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     value: '420000000000', // Sending 420000000000 wei
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     gasLimit: 500000, // Adjust as needed
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function sendTransaction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await wallet.sendTransaction(txParams);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction sent:', txResponse);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Example function to send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function sendTransaction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         // Example transaction parameters
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txParams = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c', // Contract address
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: web3.utils.toWei('420000000000', 'wei'), // Value in wei
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         // Sign and send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await wallet.sendTransaction(txParams);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction sent. Transaction hash:', txResponse.hash);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         // Store the transaction hash for further reference
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const transactionHash = txResponse.hash;
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Call the function to send transaction
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // sendTransaction();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // /// ETHERS
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require("ethers");

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Contract ABI
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractABI = [{"constant":true,"inputs":[],"name":"myFunction","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}];


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Contract address
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = "0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c";

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Provider instance 
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const provider = new ethers.providers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z");

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Contract instance
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contract = new ethers.Contract(contractAddress, contractABI, provider);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Call the view function with arguments
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // contract.viewFunction('22781797092868169288725644184323813601368064181519283466580965179100903181887', arg2 ).then((result) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.log("Result:", result);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }).catch((error) => {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     console.error("Error:", error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // });





// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector;

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const data = await web3.eth.call({
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('data:', data);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const encodedData = "43616c6c207468697320636f6e747261637420776974682066756e6374696f6e207369676e6174757265202730786464633234626533272070726f766964696e672061202775696e743235362720617267756d656e74206f662076616c75653a20323237383137393730393238363831363932383837323536343431383433323338313336303133363830363431383135313932383334363635383039363531373931303039303331383138383720416c736f2073656e6420736f6d65207765693a203432303030303030303030300000000000000000000000000000000000";

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Convert hexadecimal string to bytes
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const bytes = [];
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // for (let i = 0; i < encodedData.length; i += 2) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     bytes.push(parseInt(encodedData.substr(i, 2), 16));
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Convert bytes to string
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const decodedString = new TextDecoder().decode(new Uint8Array(bytes));

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // console.log(decodedString);


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = '420000000000';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const data = await web3.eth.sendTransaction({
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', data.transactionHash);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's address here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // const senderAddress = '0x7e01C592dF77723DE91b6C717abF56e759b172Aa';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = '420000000000';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const data = await web3.eth.sendTransaction({
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             from: senderAddress, // Specify the sender's address
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         });

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', data.transactionHash);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();


// // // // // // // // // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = '420000000000';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             gas: 2000000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             gasPrice: web3.utils.toWei('30', 'gwei'), // Adjust gas price according to your needs
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = '420000000000';

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const maxPriorityFeePerGas = web3.utils.toWei('30', 'gwei'); // Example: 30 Gwei
// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const maxFeePerGas = web3.utils.toWei('30', 'gwei'); // Example: 30 Gwei

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             gas: 1000000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas,
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas,
// // // // // // // // // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // // // // // const alchemyProvider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // // //         const value = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');
// // // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = ethers.utils.parseEther('0.42');

// // // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + ethers.utils.defaultAbiCoder.encode(['uint256'], [value]).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // // //         const wallet = new ethers.Wallet(senderPrivateKey, alchemyProvider);

// // // // // // // // // // // // // // // // // // // // // // // // // // //         const PRIORITY_FEE = ethers.utils.parseUnits('80', 'gwei');
// // // // // // // // // // // // // // // // // // // // // // // // // // //         const MAX_FEE = ethers.utils.parseUnits('80', 'gwei');
// // // // // // // // // // // // // // // // // // // // // // // // // // //         const CHAIN_ID = await alchemyProvider.getNetwork().then(network => network.chainId);

// // // // // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             gasLimit: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // // // // // //             chainId: CHAIN_ID,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             type: 2, // EIP 1559
// // // // // // // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas: PRIORITY_FEE,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas: MAX_FEE,
// // // // // // // // // // // // // // // // // // // // // // // // // // //             nonce: await wallet.getTransactionCount()
// // // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await wallet.signTransaction(txObject);
// // // // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await alchemyProvider.sendTransaction(signedTx);

// // // // // // // // // // // // // // // // // // // // // // // // // //     //     console.log('Transaction Hash:', txResponse.hash);
// // // // // // // // // // // // // // // // // // // // // // // // // //     // } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // //     //     console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // // // // const alchemyProvider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // // //         const value = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');
// // // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = ethers.utils.parseEther('0.42');

// // // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + ethers.utils.defaultAbiCoder.encode(['uint256'], [value]).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // // //         const wallet = new ethers.Wallet(senderPrivateKey, alchemyProvider);
        
// // // // // // // // // // // // // // // // // // // // // // // // // //         // Estimate gas for the transaction
// // // // // // // // // // // // // // // // // // // // // // // // // //         const estimatedGas = await alchemyProvider.estimateGas({
// // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend
// // // // // // // // // // // // // // // // // // // // // // // // // //         });
        
// // // // // // // // // // // // // // // // // // // // // // // // // //         // Set gas fee parameters based on the estimated gas
// // // // // // // // // // // // // // // // // // // // // // // // // //         const gasPrice = await alchemyProvider.getGasPrice();
// // // // // // // // // // // // // // // // // // // // // // // // // //         const maxFee = gasPrice.mul(estimatedGas);
// // // // // // // // // // // // // // // // // // // // // // // // // //         const priorityFee = ethers.utils.parseUnits('1', 'gwei');
// // // // // // // // // // // // // // // // // // // // // // // // // //         const CHAIN_ID = await alchemyProvider.getNetwork().then(network => network.chainId);

// // // // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // // // //             from: wallet.address, // Add the sender's address
// // // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // // // //             gasLimit: estimatedGas.mul(2), // Use estimated gas with some buffer
// // // // // // // // // // // // // // // // // // // // // // // // // //             chainId: CHAIN_ID,
// // // // // // // // // // // // // // // // // // // // // // // // // //             type: 2, // EIP 1559
// // // // // // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas: priorityFee,
// // // // // // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas: maxFee,
// // // // // // // // // // // // // // // // // // // // // // // // // //             nonce: await wallet.getTransactionCount()
// // // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await wallet.signTransaction(txObject);
// // // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await alchemyProvider.sendTransaction(signedTx);

// // // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txResponse.hash);
// // // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // // // const alchemyProvider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // // //         const value = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');
// // // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = ethers.utils.parseEther('0.42');

// // // // // // // // // // // // // // // // // // // // // // // // //         // Ensure weiToSend is a BigNumber
// // // // // // // // // // // // // // // // // // // // // // // // //         if (!ethers.BigNumber.isBigNumber(weiToSend)) {
// // // // // // // // // // // // // // // // // // // // // // // // //             throw new Error('Invalid value format for weiToSend');
// // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // //         // Debugging: Print out weiToSend
// // // // // // // // // // // // // // // // // // // // // // // // //         console.log('weiToSend:', weiToSend.toString());

// // // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + ethers.utils.defaultAbiCoder.encode(['uint256'], [value]).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // // //         const wallet = new ethers.Wallet(senderPrivateKey, alchemyProvider);

// // // // // // // // // // // // // // // // // // // // // // // // //         const PRIORITY_FEE = ethers.utils.parseUnits('1', 'gwei');
// // // // // // // // // // // // // // // // // // // // // // // // //         const MAX_FEE = ethers.utils.parseUnits('80', 'gwei'); // Set max fee to 80 Gwei
// // // // // // // // // // // // // // // // // // // // // // // // //         const CHAIN_ID = await alchemyProvider.getNetwork().then(network => network.chainId);

// // // // // // // // // // // // // // // // // // // // // // // // //         // Specify 'from' address in the transaction object
// // // // // // // // // // // // // // // // // // // // // // // // //         const fromAddress = wallet.address;

// // // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // // //             from: fromAddress,
// // // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // // //             gasLimit: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // // // //             chainId: CHAIN_ID,
// // // // // // // // // // // // // // // // // // // // // // // // //             type: 2, // EIP 1559
// // // // // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas: PRIORITY_FEE,
// // // // // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas: MAX_FEE,
// // // // // // // // // // // // // // // // // // // // // // // // //             nonce: await wallet.getTransactionCount()
// // // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // // //         // Estimate gas usage for the transaction
// // // // // // // // // // // // // // // // // // // // // // // // //         const estimatedGas = await alchemyProvider.estimateGas(txObject);
// // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Estimated gas usage:', estimatedGas.toString());

// // // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await wallet.signTransaction(txObject);
// // // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await alchemyProvider.sendTransaction(signedTx);

// // // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txResponse.hash);
// // // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // // const alchemyProvider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // // Specify your MetaMask wallet address here
// // // // // // // // // // // // // // // // // // // // // // // // const metaMaskAddress = '0x7e01C592dF77723DE91b6C717abF56e759b172Aa';

// // // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // // //         const value = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');
// // // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = ethers.utils.parseEther('0.42');

// // // // // // // // // // // // // // // // // // // // // // // //         // Ensure weiToSend is a BigNumber
// // // // // // // // // // // // // // // // // // // // // // // //         if (!ethers.BigNumber.isBigNumber(weiToSend)) {
// // // // // // // // // // // // // // // // // // // // // // // //             throw new Error('Invalid value format for weiToSend');
// // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // //         // Debugging: Print out weiToSend
// // // // // // // // // // // // // // // // // // // // // // // //         console.log('weiToSend:', weiToSend.toString());

// // // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + ethers.utils.defaultAbiCoder.encode(['uint256'], [value]).slice(2);

// // // // // // // // // // // // // // // // // // // // // // // //         // Use MetaMask provider to connect to the wallet
// // // // // // // // // // // // // // // // // // // // // // // //         const metaMaskProvider = new ethers.providers.Web3Provider(window.ethereum);

// // // // // // // // // // // // // // // // // // // // // // // //         // Request access to MetaMask wallet accounts
// // // // // // // // // // // // // // // // // // // // // // // //         await window.ethereum.enable();

// // // // // // // // // // // // // // // // // // // // // // // //         // Get signer from MetaMask provider
// // // // // // // // // // // // // // // // // // // // // // // //         const signer = metaMaskProvider.getSigner();

// // // // // // // // // // // // // // // // // // // // // // // //         // Use signer to get the wallet address
// // // // // // // // // // // // // // // // // // // // // // // //         const fromAddress = await signer.getAddress();

// // // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // // //             from: fromAddress,
// // // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // // //             gasLimit: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // // //         // Estimate gas usage for the transaction
// // // // // // // // // // // // // // // // // // // // // // // //         const estimatedGas = await signer.estimateGas(txObject);
// // // // // // // // // // // // // // // // // // // // // // // //         console.log('Estimated gas usage:', estimatedGas.toString());

// // // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await signer.signTransaction(txObject);
// // // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await metaMaskProvider.sendTransaction(signedTx);

// // // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txResponse.hash);
// // // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // // const { ethers } = require('ethers');

// // // // // // // // // // // // // // // // // // // // // // // const infuraProvider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.infura.io/v3/cdfba1f282324405b6282db24bed294f');

// // // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // // Specify your MetaMask wallet address here
// // // // // // // // // // // // // // // // // // // // // // // const metaMaskAddress = '0x7e01C592dF77723DE91b6C717abF56e759b172Aa';

// // // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // // //         const value = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');
// // // // // // // // // // // // // // // // // // // // // // //         const weiToSend = ethers.utils.parseEther('0.42');

// // // // // // // // // // // // // // // // // // // // // // //         // Ensure weiToSend is a BigNumber
// // // // // // // // // // // // // // // // // // // // // // //         if (!ethers.BigNumber.isBigNumber(weiToSend)) {
// // // // // // // // // // // // // // // // // // // // // // //             throw new Error('Invalid value format for weiToSend');
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         // Debugging: Print out weiToSend
// // // // // // // // // // // // // // // // // // // // // // //         console.log('weiToSend:', weiToSend.toString());

// // // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + ethers.utils.defaultAbiCoder.encode(['uint256'], [value]).slice(2);

// // // // // // // // // // // // // // // // // // // // // // //         const wallet = new ethers.Wallet('31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637', infuraProvider);

// // // // // // // // // // // // // // // // // // // // // // //         const PRIORITY_FEE = ethers.utils.parseUnits('1', 'gwei');
// // // // // // // // // // // // // // // // // // // // // // //         const MAX_FEE = ethers.utils.parseUnits('120', 'gwei'); // Set max fee to 80 Gwei
// // // // // // // // // // // // // // // // // // // // // // //         const CHAIN_ID = await infuraProvider.getNetwork().then(network => network.chainId);

// // // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // // //             from: metaMaskAddress,
// // // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // // //             gasLimit: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // // //             chainId: CHAIN_ID,
// // // // // // // // // // // // // // // // // // // // // // //             type: 2, // EIP 1559
// // // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas: PRIORITY_FEE,
// // // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas: MAX_FEE,
// // // // // // // // // // // // // // // // // // // // // // //             nonce: await wallet.getTransactionCount()
// // // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // // //         // Estimate gas usage for the transaction
// // // // // // // // // // // // // // // // // // // // // // //         const estimatedGas = await infuraProvider.estimateGas(txObject);
// // // // // // // // // // // // // // // // // // // // // // //         console.log('Estimated gas usage:', estimatedGas.toString());

// // // // // // // // // // // // // // // // // // // // // // //         const signedTx = await wallet.signTransaction(txObject);
// // // // // // // // // // // // // // // // // // // // // // //         const txResponse = await infuraProvider.sendTransaction(signedTx);

// // // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txResponse.hash);
// // // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // // //         const weiToSend = '42000000000';

// // // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // // //         const maxPriorityFeePerGas = web3.utils.toWei('50', 'gwei'); // Example: 30 Gwei
// // // // // // // // // // // // // // // // // // // // // //         const maxFeePerGas = web3.utils.toWei('120', 'gwei'); // Example: 30 Gwei

// // // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas,
// // // // // // // // // // // // // // // // // // // // // //             maxFeePerGas,
// // // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // // // // // // // // // // // // // //         const weiToSend = '42000000000';

// // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // //         // Get current gas prices
// // // // // // // // // // // // // // // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // // // // // // // // // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // // // // // // // // // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // // // // // // // // // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // // // // // // // // // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // //             gasPrice: suggestedPriorityFeePerGas,
// // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address),
// // // // // // // // // // // // // // // // // // // // //             chainId: 80001,
// // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');

// // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // //         const valueInEther = 0.000042; // Value in ether (Matic)
// // // // // // // // // // // // // // // // // // // // //         const maticToWeiConversionRate = 10**18; // 1 Matic = 10^18 wei
// // // // // // // // // // // // // // // // // // // // //         const valueInWei = valueInEther * maticToWeiConversionRate; // Convert Matic to wei

// // // // // // // // // // // // // // // // // // // // //         const weiToSend = web3.utils.toBN(valueInWei).toString();

// // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt(valueInWei).toString(16);

// // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // //         // Get current gas prices
// // // // // // // // // // // // // // // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // // // // // // // // // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // // // // // // // // // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // // // // // // // // // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // // // // // // // // // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // //             value: weiToSend,
// // // // // // // // // // // // // // // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas,
// // // // // // // // // // // // // // // // // // // // //             maxFeePerGas,
// // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // // // // // // // // // // // // // const Web3 = require('web3');
// // // // // // // // // // // // // // // // // // // // const axios = require('axios');

// // // // // // // // // // // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // // // // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // // // // // // // // // // Specify your sender's private key here
// // // // // // // // // // // // // // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // // // // // // // // // // // // // Chainlink Price Feed API URL
// // // // // // // // // // // // // // // // // // // // // const chainlinkAPIUrl = 'https://api.chain.link/v1/priceFeeds/0x8316b082621cfedab95bf0c9d826b7a9230b08c7/latestAnswer';

// // // // // // // // // // // // // // // // // // // // // async function fetchPriceFeedData() {
// // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // //         const response = await axios.get(chainlinkAPIUrl);
// // // // // // // // // // // // // // // // // // // // //         const priceFeedData = response.data;

// // // // // // // // // // // // // // // // // // // // //         // Extract the latest price from the response
// // // // // // // // // // // // // // // // // // // // //         const latestPrice = priceFeedData.result / 10 ** 8; // Assuming 8 decimal places
        
// // // // // // // // // // // // // // // // // // // // //         return latestPrice;
// // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // //         console.error('Error fetching price feed data:', error);
// // // // // // // // // // // // // // // // // // // // //         throw error;
// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // async function callFunction() {
// // // // // // // // // // // // // // // // // // // // //     try {
// // // // // // // // // // // // // // // // // // // // //         const valueFromPriceFeed = await fetchPriceFeedData();
// // // // // // // // // // // // // // // // // // // // //         const value = '0x' + BigInt(valueFromPriceFeed * 10**18).toString(16); // Convert price to wei

// // // // // // // // // // // // // // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // // // // // // // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // // // // // // // // // // // // // //         const maxPriorityFeePerGas = web3.utils.toWei('30', 'gwei'); // Example: 30 Gwei
// // // // // // // // // // // // // // // // // // // // //         const maxFeePerGas = web3.utils.toWei('30', 'gwei'); // Example: 30 Gwei

// // // // // // // // // // // // // // // // // // // // //         const txObject = {
// // // // // // // // // // // // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // // // // // // // // // // // //             data: callData,
// // // // // // // // // // // // // // // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // // // // // // // // // // // // // // //             maxPriorityFeePerGas,
// // // // // // // // // // // // // // // // // // // // //             maxFeePerGas,
// // // // // // // // // // // // // // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // // // // // // // // // // // // // //         };

// // // // // // // // // // // // // // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // // // // // // // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // // // // // // // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // // // // // // // // // // // // // //     } catch (error) {
// // // // // // // // // // // // // // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // callFunction();

// // // // // // // // const axios = require('axios');
// // // // // // // // const Web3 = require('web3');

// // // // // // // // // Initialize Web3 with your preferred provider
// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // Contract details
// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Sender's private key
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // Specified value in wei
// // // // // // // // const specifiedValueWei = '42000000000';

// // // // // // // // // Function to fetch the current price of Bitcoin from Binance API
// // // // // // // // async function getPriceFromBinance() {
// // // // // // // //     try {
// // // // // // // //         const response = await axios.get('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT');
// // // // // // // //         const priceData = response.data;
// // // // // // // //         const price = parseFloat(priceData.price);
// // // // // // // //         console.log('Current Bitcoin price (BTC/USDT):', price);
// // // // // // // //         return price;
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error fetching price from Binance:', error.message);
// // // // // // // //         throw error;
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // // Function to calculate value based on the current price
// // // // // // // // function calculateValueBasedOnPrice(price) {
// // // // // // // //     // Convert the specified value to BTC
// // // // // // // //     const specifiedValueBTC = parseFloat(web3.utils.fromWei(specifiedValueWei, 'ether'));
// // // // // // // //     // Calculate the value in USDT based on the specified value in BTC and the fetched price
// // // // // // // //     const valueInUSDT = specifiedValueBTC * price;
// // // // // // // //     // Convert the value in USDT to wei
// // // // // // // //     const valueInWei = web3.utils.toWei(valueInUSDT.toString(), 'ether');
// // // // // // // //     return valueInWei;
// // // // // // // // }

// // // // // // // // // Main function to call the contract function with dynamic value based on the current price
// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         // Fetch current price from Binance
// // // // // // // //         const price = await getPriceFromBinance();

// // // // // // // //         // Calculate value based on the price
// // // // // // // //         const value = calculateValueBasedOnPrice(price);
// // // // // // // //         console.log('Value calculated based on price:', value);

// // // // // // // //         // Encode function call data
// // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // //         // Get sender account
// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current nonce
// // // // // // // //         const nonce = await web3.eth.getTransactionCount(senderAccount.address);

// // // // // // // //         // Construct transaction object
// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             nonce: nonce
// // // // // // // //         };

// // // // // // // //         // Sign the transaction
// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         // Send the signed transaction
// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
        
// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // // Call the main function
// // // // // // // // callFunction();

// // // // // // // // const Web3 = require('web3');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // // async function callFunction() {
// // // // // // // // //     try {
// // // // // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // // // // //         const weiToSend = '420000000000'; // Update wei value

// // // // // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // // //         // Get current gas prices
// // // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // // //         const txObject = {
// // // // // // // // //             to: contractAddress,
// // // // // // // // //             data: callData,
// // // // // // // // //             value: weiToSend,
// // // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // // //             maxPriorityFeePerGas,
// // // // // // // // //             maxFeePerGas,
// // // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // // //         };

// // // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // // //     } catch (error) {
// // // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // // //     }
// // // // // // // // // }

// // // // // // // callFunction();

// // // // // // // //     const Web3 = require('web3');       

// // // // // // // //     const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // //     const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // //     const functionSelector = '0xddc24be3';

// // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         // Constructor parameters (update these based on the contract's source code)
// // // // // // // //         const weiValue = '420000000000';

// // // // // // // //         // Encode constructor parameters
// // // // // // // //         const encodedParams = web3.eth.abi.encodeParameter('uint256', weiValue);

// // // // // // // //         // Combine function selector and encoded parameters
// // // // // // // //         const callData = functionSelector + encodedParams.substring(2);

// // // // // // // //         // Sender account
// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current gas prices
// // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // //         // Transaction object
// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: '0x' + weiValue, // Wei to send
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             maxPriorityFeePerGas,
// // // // // // // //             maxFeePerGas,
// // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // //         };

// // // // // // // //         // Sign transaction
// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         // Send signed transaction
// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // callFunction();

// // // // // // // // const axios = require('axios');
// // // // // // // // const Web3 = require('web3');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // Function to fetch real-time price data
// // // // // // // // async function fetchPriceData() {
// // // // // // // //     try {
// // // // // // // //         const response = await axios.get('https://mumbai-data.chain.link/v1/crypto/0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada');
// // // // // // // //         return response.data.result; // Assuming the price data is in the 'result' field
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error fetching price feed data:', error);
// // // // // // // //         throw error; // Throw error for handling in the calling function
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // // Function to calculate Wei amount based on real-time price data
// // // // // // // // async function calculateWeiAmount() {
// // // // // // // //     try {
// // // // // // // //         const tokenPrice = await fetchPriceData();
// // // // // // // //         const desiredValue = 42000000000; // Desired value in Wei
// // // // // // // //         const weiAmount = desiredValue / tokenPrice; // Calculate Wei amount based on token price
// // // // // // // //         return Math.floor(weiAmount); // Round down to nearest integer (Wei is an integer)
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calculating Wei amount:', error);
// // // // // // // //         throw error; // Throw error for handling in the calling function
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         const weiToSend = await calculateWeiAmount(); // Get Wei amount dynamically

// // // // // // // //         // Encode function parameters
// // // // // // // //         const encodedParams = web3.eth.abi.encodeParameter('uint256', weiToSend);

// // // // // // // //         // Combine function selector and encoded parameters
// // // // // // // //         const callData = functionSelector + encodedParams.substring(2);

// // // // // // // //         // Sender account
// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current gas prices
// // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // //         // Transaction object
// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: '0x' + weiToSend.toString(16), // Convert Wei amount to hexadecimal
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             maxPriorityFeePerGas,
// // // // // // // //             maxFeePerGas,
// // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // //         };

// // // // // // // //         // Sign transaction
// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         // Send signed transaction
// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // callFunction();

// // // // // // // // const axios = require('axios');
// // // // // // // // const Web3 = require('web3');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // Amount of wei to send
// // // // // // // // const weiToSend = '42000000000';

// // // // // // // // async function getPriceData() {
// // // // // // // //     try {
// // // // // // // //         // Binance public API endpoint for ETHUSDT pair
// // // // // // // //         const apiUrl = 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT';

// // // // // // // //         // Make an HTTP GET request to fetch the price data
// // // // // // // //         const response = await axios.get(apiUrl);
// // // // // // // //         const ethUsdPrice = parseFloat(response.data.price);

// // // // // // // //         console.log('ETH/USD Price:', ethUsdPrice);
// // // // // // // //         return ethUsdPrice;
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error fetching price data from Binance:', error);
// // // // // // // //         throw error;
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         const ethUsdPrice = await getPriceData();

// // // // // // // //         // Convert ETH to wei based on the fetched price
// // // // // // // //         const ethAmount = parseFloat(weiToSend) / (ethUsdPrice * Math.pow(10, 18));
// // // // // // // //         const weiAmount = web3.utils.toWei(ethAmount.toString());

// // // // // // // //         const callData = functionSelector;

// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current gas prices
// // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: weiToSend,
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             maxPriorityFeePerGas,
// // // // // // // //             maxFeePerGas,
// // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // //         };

// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // callFunction();



// // // // // // // // const axios = require('axios');
// // // // // // // // const Web3 = require('web3');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // Amount of wei to send
// // // // // // // // const weiToSend = '42000000000';

// // // // // // // // async function getPriceData() {
// // // // // // // //     try {
// // // // // // // //         // Binance public API endpoint for ETHUSDT pair
// // // // // // // //         const apiUrl = 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT';

// // // // // // // //         // Make an HTTP GET request to fetch the price data
// // // // // // // //         const response = await axios.get(apiUrl);
// // // // // // // //         const ethUsdPrice = parseFloat(response.data.price);

// // // // // // // //         console.log('ETH/USD Price:', ethUsdPrice);
// // // // // // // //         return ethUsdPrice;
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error fetching price data from Binance:', error);
// // // // // // // //         throw error;
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         const ethUsdPrice = await getPriceData();

// // // // // // // //         // Convert ETH to wei based on the fetched price
// // // // // // // //         const ethAmount = parseFloat(weiToSend) / (ethUsdPrice * Math.pow(10, 18));
// // // // // // // //         const weiAmount = web3.utils.toWei(ethAmount.toString(), 'wei'); // Adjusted here

// // // // // // // //         const callData = functionSelector;

// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current gas prices
// // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: weiAmount,
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             maxPriorityFeePerGas,
// // // // // // // //             maxFeePerGas,
// // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // //         };

// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // callFunction();

// // // // // // // // const axios = require('axios');
// // // // // // // // const Web3 = require('web3');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Specify your sender's private key here
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // // // // Amount of wei to send
// // // // // // // // const weiToSend = '42000000000';

// // // // // // // // async function getPriceData() {
// // // // // // // //     try {
// // // // // // // //         // Binance public API endpoint for ETHUSDT pair
// // // // // // // //         const apiUrl = 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT';

// // // // // // // //         // Make an HTTP GET request to fetch the price data
// // // // // // // //         const response = await axios.get(apiUrl);
// // // // // // // //         const ethUsdPrice = parseFloat(response.data.price);

// // // // // // // //         console.log('ETH/USD Price:', ethUsdPrice);
// // // // // // // //         return ethUsdPrice;
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error fetching price data from Binance:', error);
// // // // // // // //         throw error;
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // async function callFunction() {
// // // // // // // //     try {
// // // // // // // //         const ethUsdPrice = await getPriceData();

// // // // // // // //         // Convert ETH to wei based on the fetched price
// // // // // // // //         const weiAmount = web3.utils.toWei(weiToSend, 'wei'); // Adjusted here

// // // // // // // //         const callData = functionSelector;

// // // // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // // // //         // Get current gas prices
// // // // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // // // //         // Adjust fee parameters based on current gas prices
// // // // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // // // //         const txObject = {
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: weiAmount,
// // // // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // // // //             maxPriorityFeePerGas,
// // // // // // // //             maxFeePerGas,
// // // // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // // // //         };

// // // // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error calling the function:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // callFunction();

// // // // // // // // // // // // const Web3 = require('web3');
// // // // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // // // New function selector
// // // // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // // // Wei amount to send
// // // // // // // // // // // // const weiAmount = '420000000000';

// // // // // // // // // // // // Sender's address
// // // // // // // // // // // const senderAddress = '0xB4622444f5b9fBDa949F804964D3A7Ad918DD157'; // Replace with the actual sender's address

// // // // // // // // // // // async function sendTransaction() {
// // // // // // // // // // //     try {
// // // // // // // // // // //         const callData = functionSelector;

// // // // // // // // // // //         // Prepare transaction object
// // // // // // // // // // //         const transactionObject = {
// // // // // // // // // // //             from: senderAddress, // Specify the sender's address
// // // // // // // // // // //             to: contractAddress,
// // // // // // // // // // //             data: callData,
// // // // // // // // // // //             value: weiAmount, // Include the wei amount here
// // // // // // // // // // //         };

// // // // // // // // // // //         // Send transaction and get the transaction hash
// // // // // // // // // // //         const transactionHash = await web3.eth.sendTransaction(transactionObject);

// // // // // // // // // // //         console.log('Transaction Hash:', transactionHash);
// // // // // // // // // // //     } catch (error) {
// // // // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // // // //     }
// // // // // // // // // // // }

// // // // // // // // // // // sendTransaction();


// // // // // // // // // // const fetch = require('node-fetch');
// // // // // // // // // // const Web3 = require('web3');
// // // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z'); // Replace 'your_api_key' with your Alchemy API key for Polygon Mumbai

// // // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // // New function selector
// // // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // // Wei amount to send
// // // // // // // // // // const weiAmount = '420000000000';

// // // // // // // // // // // Sender's address
// // // // // // // // // // const senderAddress = '0xB4622444f5b9fBDa949F804964D3A7Ad918DD157'; // Replace with the actual sender's address

// // // // // // // // // // async function sendTransaction() {
// // // // // // // // // //     try {
// // // // // // // // // //         const callData = functionSelector;

// // // // // // // // // //         // Prepare transaction object
// // // // // // // // // //         const transactionObject = {
// // // // // // // // // //             from: senderAddress, // Specify the sender's address
// // // // // // // // // //             to: contractAddress,
// // // // // // // // // //             data: callData,
// // // // // // // // // //             value: web3.utils.toHex(weiAmount), // Include the wei amount here
// // // // // // // // // //         };

// // // // // // // // // //         // Send transaction via Alchemy API
// // // // // // // // // //         const response = await fetch(`https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z`, { // Adjust the URL for Polygon Mumbai
// // // // // // // // // //             method: 'POST',
// // // // // // // // // //             headers: {
// // // // // // // // // //                 'Content-Type': 'application/json',
// // // // // // // // // //             },
// // // // // // // // // //             body: JSON.stringify({
// // // // // // // // // //                 jsonrpc: '2.0',
// // // // // // // // // //                 method: 'eth_sendTransaction',
// // // // // // // // // //                 params: [transactionObject],
// // // // // // // // // //                 id: 1,
// // // // // // // // // //             }),
// // // // // // // // // //         });

// // // // // // // // // //         const responseData = await response.json();
// // // // // // // // // //         if (responseData.error) {
// // // // // // // // // //             throw new Error(responseData.error.message);
// // // // // // // // // //         }

// // // // // // // // // //         console.log('Transaction Hash:', responseData.result);
// // // // // // // // // //     } catch (error) {
// // // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // // //     }
// // // // // // // // // // }

// // // // // // // // // // sendTransaction();

// // // // // // // // // const Web3 = require('web3');
// // // // // // // // // const { ethers } = require('ethers');
// // // // // // // // // const fetch = require('node-fetch');

// // // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z'); // Replace 'your_api_key' with your Alchemy API key for Polygon Mumbai

// // // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // // New function selector
// // // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // // Wei amount to send
// // // // // // // // // const weiAmount = '420000000000';

// // // // // // // // // // Sender's address and private key
// // // // // // // // // const senderAddress = '0xB4622444f5b9fBDa949F804964D3A7Ad918DD157'; // Replace with the actual sender's address
// // // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637'; // Replace with the actual private key of the sender address

// // // // // // // // // async function sendTransaction() {
// // // // // // // // //     try {
// // // // // // // // //         const callData = functionSelector;

// // // // // // // // //         // Prepare transaction object
// // // // // // // // //         const transactionObject = {
// // // // // // // // //             from: senderAddress, // Specify the sender's address
// // // // // // // // //             to: contractAddress,
// // // // // // // // //             data: callData,
// // // // // // // // //             value: web3.utils.toHex(weiAmount), // Include the wei amount here
// // // // // // // // //         };

// // // // // // // // //         // Sign the transaction locally
// // // // // // // // //         const signedTx = await web3.eth.accounts.signTransaction(transactionObject, senderPrivateKey);

// // // // // // // // //         // Send the signed transaction to Alchemy for broadcasting
// // // // // // // // //         const response = await fetch(`https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z`, {
// // // // // // // // //             method: 'POST',
// // // // // // // // //             headers: {
// // // // // // // // //                 'Content-Type': 'application/json',
// // // // // // // // //             },
// // // // // // // // //             body: JSON.stringify({
// // // // // // // // //                 jsonrpc: '2.0',
// // // // // // // // //                 method: 'eth_sendRawTransaction',
// // // // // // // // //                 params: [signedTx.rawTransaction],
// // // // // // // // //                 id: 1,
// // // // // // // // //             }),
// // // // // // // // //         });

// // // // // // // // //         const responseData = await response.json();
// // // // // // // // //         if (responseData.error) {
// // // // // // // // //             throw new Error(responseData.error.message);
// // // // // // // // //         }

// // // // // // // // //         console.log('Transaction Hash:', responseData.result);
// // // // // // // // //     } catch (error) {
// // // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // // //     }
// // // // // // // // // }

// // // // // // // // // sendTransaction();

// // // // // // // // const Web3 = require('web3');
// // // // // // // // const { ethers } = require('ethers');
// // // // // // // // const fetch = require('node-fetch');

// // // // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';

// // // // // // // // // New function selector
// // // // // // // // const functionSelector = '0xddc24be3';

// // // // // // // // // Wei amount to send
// // // // // // // // const weiAmount = '420000000000';

// // // // // // // // // Sender's address and private key
// // // // // // // // const senderAddress = '0xB4622444f5b9fBDa949F804964D3A7Ad918DD157'; // Provided address
// // // // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637'; // Provided private key

// // // // // // // // async function sendTransaction() {
// // // // // // // //     try {
// // // // // // // //         const callData = functionSelector;

// // // // // // // //         // Get the gas estimate
// // // // // // // //         const gasEstimate = await web3.eth.estimateGas({
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: weiAmount,
// // // // // // // //         });

// // // // // // // //         // Prepare transaction object with gas estimate
// // // // // // // //         const transactionObject = {
// // // // // // // //             from: senderAddress, // Specify the sender's address
// // // // // // // //             to: contractAddress,
// // // // // // // //             data: callData,
// // // // // // // //             value: web3.utils.toHex(weiAmount), // Include the wei amount here
// // // // // // // //             gas: web3.utils.toHex(gasEstimate), // Include the gas estimate here
// // // // // // // //         };

// // // // // // // //         // Sign the transaction locally
// // // // // // // //         const signedTx = await web3.eth.accounts.signTransaction(transactionObject, senderPrivateKey);

// // // // // // // //         // Send the signed transaction to Alchemy for broadcasting
// // // // // // // //         const response = await fetch('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z', {
// // // // // // // //             method: 'POST',
// // // // // // // //             headers: {
// // // // // // // //                 'Content-Type': 'application/json',
// // // // // // // //             },
// // // // // // // //             body: JSON.stringify({
// // // // // // // //                 jsonrpc: '2.0',
// // // // // // // //                 method: 'eth_sendRawTransaction',
// // // // // // // //                 params: [signedTx.rawTransaction],
// // // // // // // //                 id: 1,
// // // // // // // //             }),
// // // // // // // //         });

// // // // // // // //         const responseData = await response.json();
// // // // // // // //         if (responseData.error) {
// // // // // // // //             throw new Error(responseData.error.message);
// // // // // // // //         }

// // // // // // // //         console.log('Transaction Hash:', responseData.result);
// // // // // // // //     } catch (error) {
// // // // // // // //         console.error('Error sending transaction:', error);
// // // // // // // //     }
// // // // // // // // }

// // // // // // // // sendTransaction();

// // // // // // const Web3 = require('web3');

// // // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // // const functionSelector = '0xddc24be3';

// // // // // // // Specify your sender's private key here
// // // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // // async function callFunction() {
// // // // // //     try {
// // // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // // //         const weiAmount = BigInt('420000000000'); // Adjust the value as needed
// // // // // //         const weiToSend = web3.utils.toHex(weiAmount); // Convert to hexadecimal string
        
// // // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // // //         // Get current gas prices
// // // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // // //         // Adjust fee parameters based on current gas prices
// // // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // // //         const txObject = {
// // // // // //             to: contractAddress,
// // // // // //             data: callData,
// // // // // //             value: weiToSend,
// // // // // //             gas: 500000, // Adjust gas according to your needs
// // // // // //             maxPriorityFeePerGas,
// // // // // //             maxFeePerGas,
// // // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address)
// // // // // //         };

// // // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // // //     } catch (error) {
// // // // // //         console.error('Error calling the function:', error);
// // // // // //     }
// // // // // // }

// // // // // // callFunction();



// // // // // const Web3 = require('web3');

// // // // // const web3 = new Web3('https://polygon-mumbai.g.alchemy.com/v2/eTCwIda-XdJ6FF1U2xLulcToZjg6gX64');

// // // // // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // // // // const functionSelector = '0xddc24be3';

// // // // // // Specify your sender's private key here
// // // // // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // // // // async function callFunction() {
// // // // //     try {
// // // // //         const value = '0x' + BigInt('22781797092868169288725644184323813601368064181519283466580965179100903181887').toString(16);
// // // // //         const weiToSend = '420000000000'; // Update wei value

// // // // //         const callData = functionSelector + web3.eth.abi.encodeParameter('uint256', value).slice(2);

// // // // //         const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPrivateKey);

// // // // //         // Get current gas prices
// // // // //         const { baseFeePerGas } = await web3.eth.getBlock('latest');
// // // // //         const suggestedPriorityFeePerGas = await web3.eth.getGasPrice();

// // // // //         // Adjust fee parameters based on current gas prices
// // // // //         const maxPriorityFeePerGas = suggestedPriorityFeePerGas;
// // // // //         const maxFeePerGas = web3.utils.toBN(maxPriorityFeePerGas).add(web3.utils.toBN(100000)); // Adding a buffer of 100000 wei to ensure maxFeePerGas is greater than or equal to maxPriorityFeePerGas

// // // // //         const txObject = {
// // // // //             to: contractAddress,
// // // // //             data: callData,
// // // // //             value: weiToSend,
// // // // //             gas: 500000, // Adjust gas according to your needs
// // // // //             maxPriorityFeePerGas,
// // // // //             maxFeePerGas,
// // // // //             nonce: await web3.eth.getTransactionCount(senderAccount.address),
// // // // //             chainId: 80001
// // // // //         };

// // // // //         const signedTx = await senderAccount.signTransaction(txObject);

// // // // //         const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);

// // // // //         console.log('Transaction Hash:', txReceipt.transactionHash);
// // // // //     } catch (error) {
// // // // //         console.error('Error calling the function:', error);
// // // // //     }
// // // // // }

// // // // // callFunction();


// // // // //Ethersjs swap for web3

// // const { ethers } = require('ethers');

// // const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // const functionSelector = '0xddc24be3';
// // const argument = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');

// // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // async function callFunction() {
// //     try {
// //         const value = ethers.utils.parseUnits('420000000000', 'wei');

// //         const abiCoder = new ethers.utils.AbiCoder();
// //         const encodedArgument = abiCoder.encode(['uint256'], [argument]);

// //         const callData = functionSelector + encodedArgument.replace('0x', '');

// //         const wallet = new ethers.Wallet(senderPrivateKey, provider);

// //         // Fetch the next available nonce
// //         const nonce = await provider.getTransactionCount(wallet.address);

// //         const tx = {
// //             to: contractAddress,
// //             data: callData,
// //             value: value,
// //             gasLimit: 200000,
// //             gasPrice: null, // Use default gas price
// //             nonce: nonce, // Set the fetched nonce
// //             chainId: 80001 // Specify the chain ID of the network
// //         };
        
// //         const signedTx = await wallet.signTransaction(tx);
// //         const txReceipt = await provider.sendTransaction(signedTx);

// //         console.log('Transaction Hash:', txReceipt.hash);
// //     } catch (error) {
// //         console.error('Error calling the function:', error);
// //     }
// // }

// // callFunction();


// // const { ethers } = require('ethers');

// // const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // const functionSelector = '0xddc24be3';
// // const argument = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');

// // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // async function callFunction() {
// //     try {
// //         const value = ethers.utils.parseUnits('420000000000', 'wei');

// //         const abiCoder = new ethers.utils.AbiCoder();
// //         const encodedArgument = abiCoder.encode(['uint256'], [argument]);

// //         const callData = functionSelector + encodedArgument.replace('0x', '');

// //         const wallet = new ethers.Wallet(senderPrivateKey, provider);

// //         const tx = {
// //             to: contractAddress,
// //             data: callData,
// //             value: value,
// //             gasLimit: 500000,
// //             gasPrice: null, // Use default gas price
// //             nonce: null, // Use default nonce
// //             chainId: 80001 // Specify the chain ID of the network
// //         };
        

// //         const signedTx = await wallet.signTransaction(tx);
// //         const txReceipt = await provider.sendTransaction(signedTx);

// //         console.log('Transaction Hash:', txReceipt.hash);
// //     } catch (error) {
// //         console.error('Error calling the function:', error);
// //     }
// // }

// // callFunction();

// //SECOND CODE COMPLETE/// 
// // const { ethers } = require('ethers');

// // const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // const functionSelector = '0xddc24be3';
// // const argument = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');

// // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // async function callFunction() {
// //     try {
// //         const value = ethers.utils.parseUnits('420000000000', 'wei');

// //         const abiCoder = new ethers.utils.AbiCoder();
// //         const encodedArgument = abiCoder.encode(['uint256'], [argument]);

// //         const callData = functionSelector + encodedArgument.replace('0x', '');

// //         const wallet = new ethers.Wallet(senderPrivateKey, provider);

// //         // Fetch the next available nonce
// //         const nonce = await provider.getTransactionCount(wallet.address);

// //         // Specify gas price manually
// //         const gasPrice = ethers.utils.parseUnits('20', 'gwei'); // set gas price to 20 Gwei

// //         const tx = {
// //             to: contractAddress,
// //             data: callData,
// //             value: value,
// //             gasLimit: 500000,
// //             gasPrice: gasPrice, // Manually set gas price
// //             nonce: nonce, // Set the fetched nonce
// //             chainId: 80001, // Specify the chain ID of the network
// //             from: wallet.address // Set the sender address
// //         };

// //         const signedTx = await wallet.signTransaction(tx);
// //         const txReceipt = await provider.sendTransaction(signedTx);

// //         console.log('Transaction Hash:', txReceipt.hash);
// //     } catch (error) {
// //         console.error('Error calling the function:', error);
// //     }
// // }

// // callFunction();



// // const { ethers } = require("ethers");

// // // Provider setup
// // const provider = new ethers.providers.JsonRpcProvider("https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z");

// // // Wallet setup (if you're sending from a wallet)
// // const privateKey = "31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637";
// // const wallet = new ethers.Wallet(privateKey, provider);

// // // Transaction data
// // const transactionData = {
// //     from: wallet.address,
// //     to: "0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c",
// //     value: ethers.utils.parseEther("0.00000042"), // Convert to wei
// //     data: "0xddc24be3000000000000000000000000000000000000000000000000000000000000006c00",
// //     gasLimit: ethers.BigNumber.from("500000"), // Set a higher gas limit
// // };

// // async function sendTransaction() {
// //     try {
// //         // Send transaction
// //         const tx = await wallet.sendTransaction(transactionData);
// //         console.log("Transaction sent:", tx.hash);

// //         // Wait for transaction confirmation
// //         await tx.wait();
// //         console.log("Transaction confirmed");
// //     } catch (error) {
// //         console.error("Error sending transaction:", error);
// //     }
// // }

// // sendTransaction();

// // const { ethers } = require('ethers');

// // const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// // const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// // const functionSelector = '0xddc24be3';
// // const argument = ethers.BigNumber.from('22781797092868169288725644184323813601368064181519283466580965179100903181887');

// // const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637';

// // async function callFunction() {
// //     try {
// //         const value = ethers.utils.parseUnits('420000000000', 'wei');

// //         const abiCoder = new ethers.utils.AbiCoder();
// //         const encodedArgument = abiCoder.encode(['uint256'], [argument]);

// //         const callData = functionSelector + encodedArgument.replace('0x', '');

// //         const wallet = new ethers.Wallet(senderPrivateKey, provider);

// //         const tx = {
// //             to: contractAddress,
// //             data: callData,
// //             value: value,
// //             gasLimit: 500000,
// //             gasPrice: null, // Use default gas price
// //             nonce: null, // Use default nonce
// //             chainId: 80001 // Specify the chain ID of the network
// //         };
        
// //         const signedTx = await wallet.signTransaction(tx);
// //         const txReceipt = await provider.sendTransaction(signedTx);

// //         console.log('Transaction Hash:', txReceipt.hash);
// //     } catch (error) {
// //         console.error('Error calling the function:', error);
// //     }
// // }

// // callFunction();

// const { ethers } = require('ethers');

// const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

// const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
// const firstFunctionSelector = '0x838ad0ee';
// const secondFunctionSelector = '0xddc24be3';

// // Define contract ABI
// const contractABI = [{"constant":true,"inputs":[],"name":"myFunction","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]

// // Define the sender's private key
// const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637'; // Replace 'YOUR_PRIVATE_KEY_HERE' with the actual private key

// async function callFunction() {
//     try {
//         const wallet = new ethers.Wallet(senderPrivateKey, provider);

//         // 1st interaction: Call 0x838ad0ee function
//         const firstCallData = firstFunctionSelector;
//         const firstTx = {
//             from: wallet.address,
//             to: contractAddress,
//             data: firstCallData,
//         };
//         const firstTxResult = await provider.call(firstTx);    


//         // Decode the result using contract ABI
//         const decodedResult = ethers.utils.defaultAbiCoder.decode(['bytes32', 'uint256'], firstTxResult);

//         const argument = decodedResult[0];
//         const hexValue = decodedResult[1].toString();

//         console.log("Argument:", argument);
//         console.log("Hex Value:", hexValue);

//         // 2nd interaction: Use output from first call to send transaction
//         const secondTx = {
//             to: contractAddress,
//             data: secondFunctionSelector + argument.slice(2), // Remove '0x' prefix from the argument
//             value: ethers.BigNumber.from(hexValue), // Convert hexadecimal string to BigNumber ****ISSUE HERE***
//             gasLimit: 500000,
//             chainId: 80001, // Assuming Mumbai testnet
//         };

//         const txResponse = await wallet.sendTransaction(secondTx);
//         console.log('Transaction Hash:', txResponse.hash);
//     } catch (error) {
//         console.error('Error calling the function:', error);
//     }
// }

// callFunction();




const { ethers } = require('ethers');

const provider = new ethers.providers.JsonRpcProvider('https://polygon-mumbai.g.alchemy.com/v2/H-NeenHPLJSSEKk3-c1sgoyU5R-O_L9Z');

const contractAddress = '0x57C98f1f2BC34A0054CBc1257fcc9333c1b6730c';
const firstFunctionSelector = '0x838ad0ee';

// Define the sender's private key
const senderPrivateKey = '31c3259ce2eb39d49886638e0f7d956ff28df1e7014871dd38062d6792155637'; // Replace 'YOUR_PRIVATE_KEY_HERE' with the actual private key

function findInfoFromDecodedTxResponse(inputString) {
    // Regular expressions to extract function signature, argument type, argument value, value, and wei
    const signatureRegex = /function signature '(\w+)'/;
    const argumentTypeRegex = /providing a '(\w+)' argument/;
    const argumentValueRegex = /value: (\d+)/;
    const weiRegex = /wei: (\d+)/;

    // Extracting function signature, argument type, argument value, value, and wei
    const signatureMatch = inputString.match(signatureRegex);
    const argumentTypeMatch = inputString.match(argumentTypeRegex);
    const argumentValueMatch = inputString.match(argumentValueRegex);
    const weiMatch = inputString.match(weiRegex);

    if (signatureMatch && argumentTypeMatch && argumentValueMatch && weiMatch) {
        const functionSignature = signatureMatch[1];
        const argumentType = argumentTypeMatch[1];
        const argumentValue = argumentValueMatch[1];
        const wei = weiMatch[1];

        return {
            functionSignature: functionSignature,
            argumentType: argumentType,
            argumentValue: argumentValue,
            wei: wei
        };
    } else {
        return {
            error: "Some information not found in the decoded tx response."
        };
    }
}

async function callFunction() {
    try {
        const wallet = new ethers.Wallet(senderPrivateKey, provider);

        // 1st interaction: Call 0x.... function
        const firstCallData = firstFunctionSelector;
        const firstTx = {
            from: wallet.address,
            to: contractAddress,
            data: firstCallData,
        };
        const firstTxResult = await provider.call(firstTx);
        // Extract the argument and value from the response of the first call

        // Remove '0x' prefix
        const hexData = firstTxResult.slice(2);

        // Extract the offset (first 32 bytes)
        const offset = ethers.BigNumber.from('0x' + hexData.slice(0, 64)).toNumber();

        // Interpret the offset to determine the start of the actual data
        const dataStart = 2 + (offset * 2); // Multiply by 2 because each byte is represented by 2 characters in hexadecimal

        // Extract the actual data and strip leading zeroes
        const data = '0x' + hexData.slice(dataStart).replace(/^0+/, '');

        // Convert hexadecimal data to bytes
        const dataBytes = ethers.utils.arrayify(data);

        // Convert bytes to a readable string
        const decodedData = ethers.utils.toUtf8String(dataBytes, ethers.utils.Utf8ErrorFuncs.ignore);

        console.log(decodedData);

        const secondTxInfo = findInfoFromDecodedTxResponse(decodedData);

        console.log(secondTxInfo);
        // 2nd interaction: Use output from first call to send transaction
        if (!secondTxInfo.error) {
            const secondFunctionSelector = secondTxInfo.functionSignature;
            const secondFunctionArgValue = BigInt(secondTxInfo.argumentValue).toString();
            const secondFunctionCallData = secondFunctionSelector + ethers.utils.defaultAbiCoder.encode([secondTxInfo.argumentType], [secondFunctionArgValue]).slice(2);
            const secondFunctionWeiValue = secondTxInfo.wei
            const secondTx = {
                from: wallet.address,
                to: contractAddress,
                data: secondFunctionCallData,
                value: secondFunctionWeiValue
            };

            // console.log(secondTx)

            wallet.sendTransaction(secondTx).then(async (signedTx) => {
                // Send the signed transaction
                const txReceipt = await signedTx.wait();
                console.log("Transaction hash:", txReceipt.transactionHash);
            })
        }
        else {
            console.log(secondTxInfo.error)
        }


    } catch (error) {
        console.error('Error calling the function:', error);
    }
}

callFunction();

/// OUTPUT:

// teromemensah@UNKNOWN RavenDAO % node call-view-function.js
// Call this contract with function signature '0xddc24be3' providing a 'uint256' argument of value: 43888411679523152060816120841375697025458656171614689903081029266955785648349 Also send some wei: 420004708343
// {
//   functionSignature: '0xddc24be3',
//   argumentType: 'uint256',
//   argumentValue: '43888411679523152060816120841375697025458656171614689903081029266955785648349',
//   wei: '420004708343'
// }
// Transaction hash: 0x7cbd0a241c6ec37bdcecb6c97e1ae0d54fbf6a9a7624dacac56ee0f1e4040fe4
/// **SUCCESS***